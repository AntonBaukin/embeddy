<?xml version = '1.0' encoding = 'UTF-8'?>

<project xmlns:ivy = 'antlib:org.apache.ivy.ant'
         xmlns:if  = 'ant:if'
         basedir   = '..'
         name      = 'Embeddy.webapp'
         default   = 'package'>


  <!-- ====[ Shared Variables ]==== -->

  <property name  = 'release'
            value = 'false'/>

  <property name  = 'build-root'
            value = '${basedir}/build'/>

  <property name  = 'explode-root'
            value = '${basedir}/explode'/>

  <property name  = 'bundles-root'
            value = '${explode-root}/bundles'/>

  <property name  = 'libs-compile'
            value = '${build-root}/.libs-osgi-boot'/>

  <property name  = 'libs-bundles'
            value = '${build-root}/.libs-osgi-core'/>

  <property name  = 'libs-delegate'
            value = '${build-root}/.libs-delegate'/>

  <property name  = 'libs-springer'
            value = '${build-root}/.libs-springer'/>

  <property name  = 'springer-classes'
            value = '${basedir}/springer/target/classes'/>


  <!-- ====[ Webapp Module Variables ]==== -->

  <property name  = 'archive'
            value = 'webapp.jar'/>

  <property name  = 'webapp-root'
            value = '${basedir}/webapp'/>

  <property name  = 'webapp-sources'
            value = '${webapp-root}/sources'/>

  <property name  = 'webapp-meta'
            value = '${webapp-root}/meta'/>

  <property name  = 'webapp-target'
            value = '${webapp-root}/target'/>

  <property name  = 'webapp-classes'
            value = '${webapp-target}/classes'/>


  <!-- ====[ Compile Variables ]==== -->

  <property name  = 'compile.encoding'
            value = 'UTF-8'/>

  <property name  = 'compile.version'
            value = '1.8'/>

  <property name  = 'resources.encoding'
            value = 'UTF-8'/>


  <!-- ====[ Special Variables ]==== -->

  <condition property = '?debug'>
    <isfalse value = '${release}'/>
  </condition>

  <path id = 'main-classpath'>
    <fileset dir = '${libs-compile}' includes = '*.jar'/>
    <fileset dir = '${libs-bundles}' includes = '*.jar'/>
    <fileset dir = '${libs-delegate}' includes = '*.jar'/>
    <fileset dir = '${libs-springer}' includes = '*.jar'/>
    <path path = '${springer-classes}'/>
  </path>


  <!-- § init -->

  <target name = 'init'>

    <mkdir dir = '${bundles-root}'/>
    <mkdir dir = '${webapp-classes}'/>
  </target>


  <!-- § compile -->

  <target name = 'compile' depends = 'init'>

    <javac srcdir = '${webapp-sources}'
         destdir  = '${webapp-classes}'

      debug    = '${?debug}'
      encoding = '${compile.encoding}'
      includeAntRuntime = 'false'
      source   = '${compile.version}'
      target   = '${compile.version}'>

      <classpath refid = 'main-classpath'/>
    </javac>

    <sync todir = '${webapp-classes}'
      overwrite = 'true' includeEmptyDirs = 'true'>

      <fileset dir = '${webapp-sources}'>
        <exclude name = '**/*.java'/>
      </fileset>

      <preserveintarget>
        <include name = '**/*.class'/>
      </preserveintarget>
    </sync>
  </target>


  <!-- § content -->

  <condition property = 'webapp-content'
    value = '${webapp.content}'>

    <and>
      <isset property = 'webapp.content'/>
      <available file = '${webapp.content}' type = 'dir'/>
    </and>
  </condition>

  <condition property = '?webapp-content'>
    <available file = '${webapp-content}'/>
  </condition>

  <condition property = '?webapp-gzip'>
    <or>
      <not><isset property = 'webapp.gzip'/></not>
      <istrue value = '${webapp.gzip}'/>
    </or>
  </condition>

  <target name = 'content' depends = 'init' if = '${?webapp-content}'>

    <mkdir dir = '${webapp-target}/content'/>

    <sync todir = '${webapp-target}/content'
      overwrite = 'true' includeEmptyDirs = 'true'>

      <fileset dir = '${webapp-content}'/>
    </sync>

    <pathconvert property = 'webapp-gzip-list' pathsep = ';'>
      <fileset dir = '${webapp-target}/content'>

        <include name = '**/*.html'/>
        <include name = '**/*.css'/>
        <include name = '**/*.js'/>
      </fileset>
    </pathconvert>

    <script language = 'javascript' if:true = '${?webapp-gzip}'>
    <![CDATA[

      var gz = project.createTask('gzip')
      var fs = project.getProperty('webapp-gzip-list').split(';')

      for(var i = 0;(i < fs.length);i++)
      {
        gz.setSrc(new java.io.File(fs[i]))
        gz.setDestfile(new java.io.File(fs[i] + '.gz'))
        gz.perform()
      }
    ]]>
    </script>
  </target>


  <!-- § pack -->

  <target name = 'pack' depends = 'compile, content'>

    <mkdir dir = '${webapp-target}/content'/>

    <jar destfile = '${webapp-target}/${archive}'
         basedir  = '${webapp-classes}'
         encoding = 'UTF-8'
         manifest = '${webapp-meta}/MANIFEST.MF'>

      <zipfileset prefix = 'META-INF'
        dir = '${webapp-meta}'>

        <exclude name = 'MANIFEST.MF'/>
      </zipfileset>

      <zipfileset prefix = 'content'
        dir = '${webapp-target}/content'/>
    </jar>
  </target>


  <!-- § copy -->

  <target name = 'pack-copy' depends = 'pack' if = '${?webapp-content}'>

    <copy file = '${webapp-target}/${archive}'
      todir = "${bundles-root}"/>
  </target>


  <!-- § package -->

  <target name = 'package' depends = 'pack, pack-copy'/>


  <!-- § clean -->

  <target name = 'clean'>

    <delete dir = '${webapp-target}'/>
  </target>
</project>